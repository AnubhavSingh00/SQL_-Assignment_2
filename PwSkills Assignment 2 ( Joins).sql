-- Question 1 --
  -- Retrive the total number of rentals made in the Sakila Database.
 select count(rental_id) from rental;
 
 -- Question 2 
  -- Find the average rental duration (in days) of movies rented from the Sakila Database.
  select avg(datediff (return_date, rental_date)) as AverageRentalDuration from rental;
  
  -- Question 3 
  -- Display the first name and last name of customer in Uppercase
  SELECT UPPER(first_name) AS uppercase_first_name, UPPER(last_name) AS uppercase_last_name FROM customer;
  
  -- Question 4
  -- Extract the month from the rental date and display it alongside the rental ID.
   select rental_id, month(rental_date) as RentalMonth from rental;
   
   -- Question 5 
   -- Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
   select customer_id, count(rental_id) from rental group by customer_id;
  
   -- Question 6 
   -- Find the total revenue generated by each store.
   select store.store_id, sum(amount) as Total from store left join staff on store.store_id left join payment on staff.staff_id group by store_id;
   
   -- Question 7 
   -- Display the title of the movie, customer's first name and last name who rented it.
   SELECT 
    film.title AS MovieTitle,
    customer.first_name AS CustomerFirstName,
    customer.last_name AS CustomerLastName
FROM
    rental
        JOIN
    inventory ON rental.inventory_id = inventory.inventory_id
        JOIN
    film ON inventory.film_id = film.film_id
        JOIN
    customer ON rental.customer_id = customer.customer_id;
    
    -- Question 8
    -- Retrieve the names of all actors who have appeared in the film " Gone with the wind".
SELECT 
    actor.first_name AS Actor_name
FROM
    actor
        JOIN
    film_actor ON actor.actor_id = film_actor.actor_id
        JOIN
    film ON film_actor.film_id = film.film_id
WHERE
    film.title LIKE 'Gone with the wind';
    
     -- Question 9 
     -- Determine the total number of rentals for each category of movies.
     SELECT 
    film_category.category_id, COUNT(*) AS Rental_Count
FROM
    film_category
        JOIN
    film ON film_category.film_id = film.film_id
        JOIN
    inventory ON film_category.film_id = inventory.film_id
        JOIN
    rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film_category.category_id;

  -- Question 10
  -- Find the average rental rate of movies in each language.
SELECT 
    language.name AS Language,
    AVG(film.rental_rate) AS Average_Rental_Rate
FROM
    film
        JOIN
    language ON film.language_id = language.language_id
GROUP BY language.name;

  -- Question 11
  -- Retreive the customer names along with the total amount they've spent on rentals.
SELECT 
    customer.customer_id,
    customer.first_name,
    customer.last_name,
    SUM(payment.amount) AS Total
FROM
    customer
        JOIN
    payment ON customer.customer_id
GROUP BY customer.customer_id , customer.first_name , customer.last_name
ORDER BY customer_id ASC;

 
 
   -- Question 12 
   -- List the titles of movies rented by each customer in a particular city ( Eg., 'London').
  SELECT 
    customer.customer_id,
    customer.first_name,
    customer.last_name,
    city.city,
    film.title AS MovieTitle
FROM
    customer
        JOIN
    address ON customer.address_id = address.address_id
        JOIN
    city ON address.city_id= city.city_id
        JOIN
    rental ON customer.customer_id = rental.customer_id
        JOIN
    inventory ON rental.inventory_id = inventory.inventory_id
        JOIN
    film ON inventory.film_id = film.film_id
WHERE
    city.city = 'London'
ORDER BY customer.customer_id , film.title , city.city;

  -- Question 13
  -- Display the top 5 rented movies along with the number of times they've rented.
  SELECT 
    film.title AS MovieTitle,
    COUNT(rental.rental_id) AS RentalCount
FROM
    film
        JOIN
    inventory ON film.film_id = inventory.film_id
        JOIN
    rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.title
ORDER BY RentalCount DESC
LIMIT 5;

  -- Question 14 
  -- Determine the customer who have rented movies from both stores(store ID 1 and store ID 2). 
 SELECT 
    customer.customer_id,
    customer.first_name,
    customer.last_name
FROM
    customer
        JOIN
    rental ON customer.customer_id = rental.customer_id
        JOIN
    inventory ON rental.inventory_id = inventory.inventory_id
        JOIN
    store ON inventory.store_id = store.store_id
WHERE
    store.store_id IN (1 , 2)
GROUP BY customer.customer_id , customer.first_name , customer.last_name
HAVING COUNT(DISTINCT store.store_id) = 2;
